#include <WiFi.h>
#include <ArduinoJson.h>
#include <DHTesp.h>
#include <PubSubClient.h>
#include <EspMQTTClient.h>

// Configurações de WiFi
const char *SSID = "Wokwi-GUEST";
const char *PASSWORD = "";  // Substitua pelo sua senha

// Configurações de MQTT
const char *BROKER_MQTT = "broker.hivemq.com";
const int BROKER_PORT = 1883;
const char *ID_MQTT = "global";
const char *TOPIC_PUBLISH_TEMP_HUMI = "FIAP/CP/TempHumi";

// Configurações de Hardware
#define PIN_DHT 12
#define RED_LED 4
#define YELLOW_LED 5
#define GREEN_LED 2
#define BUZZER_PIN 23  // Pino do buzzer
#define PUBLISH_DELAY 2000

// Variáveis globais
WiFiClient espClient;
PubSubClient MQTT(espClient);
DHTesp dht;
unsigned long publishUpdate = 0;
TempAndHumidity sensorValues;
const int TAMANHO = 200;

// Protótipos de funções
void updateSensorValues();
void initWiFi();
void initMQTT();
void callbackMQTT(char *topic, byte *payload, unsigned int length);
void reconnectMQTT();
void reconnectWiFi();
void checkWiFIAndMQTT();
void updateLEDs();

// Faixas para ativação dos LEDs
const int TEMP_RED_MIN = -40;
const int TEMP_RED_MAX = 0;
const int TEMP_GREEN_MIN = 1;
const int TEMP_GREEN_MAX = 39;
const int TEMP_YELLOW_MIN = 0;
const int TEMP_YELLOW_MAX = 50;
const int TEMP_UPPER_LIMIT = 80;
const int HUMIDITY_YELLOW_THRESHOLD = 50;

void updateSensorValues() {
  sensorValues = dht.getTempAndHumidity();
}

void initWiFi() {
  Serial.print("Conectando com a rede: ");
  Serial.println(SSID);
  WiFi.begin(SSID, PASSWORD);

  while (WiFi.status() != WL_CONNECTED) {
    delay(100);
    Serial.print(".");
  }

  Serial.println();
  Serial.print("Conectado com sucesso: ");
  Serial.println(SSID);
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());
}

void initMQTT() {
  MQTT.setServer(BROKER_MQTT, BROKER_PORT);
  MQTT.setCallback(callbackMQTT);
}

void callbackMQTT(char *topic, byte *payload, unsigned int length) {
  String msg = String((char *)payload).substring(0, length);
  Serial.printf("Mensagem recebida via MQTT: %s do tópico: %s\n", msg.c_str(), topic);
}

void reconnectMQTT() {
  while (!MQTT.connected()) {
    Serial.print("Tentando conectar com o Broker MQTT: ");
    Serial.println(BROKER_MQTT);

    if (MQTT.connect(ID_MQTT)) {
      Serial.println("Conectado ao broker MQTT!");
    } else {
      Serial.println("Falha na conexão com MQTT. Tentando novamente em 2 segundos.");
      delay(2000);
    }
  }
}

void checkWiFIAndMQTT() {
  if (WiFi.status() != WL_CONNECTED) reconnectWiFi();
  if (!MQTT.connected()) reconnectMQTT();
}

void reconnectWiFi(void) {
  if (WiFi.status() == WL_CONNECTED)
    return;

  WiFi.begin(SSID, PASSWORD);

  while (WiFi.status() != WL_CONNECTED) {
    delay(100);
    Serial.print(".");
  }

  Serial.println();
  Serial.print("Wifi conectado com sucesso");
  Serial.print(SSID);
  Serial.println("IP: ");
  Serial.println(WiFi.localIP());
}

void updateLEDs() {
  int temperature = sensorValues.temperature;
  int humidity = sensorValues.humidity;

  if ((temperature >= TEMP_RED_MIN && temperature <= TEMP_RED_MAX) || 
      (temperature >= TEMP_UPPER_LIMIT)) {
    // Se a temperatura estiver na faixa vermelha ou acima do limite superior, acende o LED vermelho
    digitalWrite(RED_LED, HIGH);
  } else {
    digitalWrite(RED_LED, LOW);
  }

  if (temperature >= TEMP_GREEN_MIN && temperature <= TEMP_GREEN_MAX) {
    // Se a temperatura estiver na faixa verde, acende o LED verde
    digitalWrite(GREEN_LED, HIGH);
  } else {
    digitalWrite(GREEN_LED, LOW);
  }

  if (temperature >= TEMP_YELLOW_MIN && temperature <= TEMP_YELLOW_MAX) {
    // Se a temperatura estiver na faixa amarela, acende o LED amarelo
    digitalWrite(YELLOW_LED, HIGH);
  } else {
    digitalWrite(YELLOW_LED, LOW);
  }

  if (humidity > HUMIDITY_YELLOW_THRESHOLD) {
    // Se a umidade estiver acima do limite, apaga o LED amarelo
    digitalWrite(YELLOW_LED, LOW);
  }
  
  // Lógica do buzzer permanece inalterada
  if ((temperature >= TEMP_RED_MIN && temperature <= TEMP_RED_MAX) || 
      (temperature >= TEMP_UPPER_LIMIT)) {
    // Se a temperatura estiver na faixa vermelha ou acima do limite superior, aciona o buzzer
    tone(BUZZER_PIN, 1000);  // Frequência de 1000 Hz
  } else {
    noTone(BUZZER_PIN);
  }
}

void setup() {
  Serial.begin(115200);

  pinMode(RED_LED, OUTPUT);
  pinMode(YELLOW_LED, OUTPUT);
  pinMode(GREEN_LED, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);

  digitalWrite(RED_LED, LOW);
  digitalWrite(YELLOW_LED, LOW);
  digitalWrite(GREEN_LED, LOW);

  dht.setup(PIN_DHT, DHTesp::DHT22);

  initWiFi();
  initMQTT();
}

void loop() {
  checkWiFIAndMQTT();
  MQTT.loop();
  updateLEDs();

  if ((millis() - publishUpdate) >= PUBLISH_DELAY) {
    publishUpdate = millis();
    updateSensorValues();

    if (!isnan(sensorValues.temperature) && !isnan(sensorValues.humidity)) {
      StaticJsonDocument<TAMANHO> doc;
      doc["temperatura"] = sensorValues.temperature;
      doc["umidade"] = sensorValues.humidity;

      char buffer[TAMANHO];
      serializeJson(doc, buffer);
      MQTT.publish(TOPIC_PUBLISH_TEMP_HUMI, buffer);
      Serial.println(buffer);
    }
  }
}
